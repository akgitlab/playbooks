---
- name: Create user with admin access
  hosts: '{{ hostlist }}'
  vars:
    password: '{{ nohash }}'
  
  
  tasks:
  
    - name: Check if the user exist
      shell: "grep -q '{{ username }}' /etc/passwd"
      ignore_errors: yes
      register: checkout
      
    - name: Stop play and send message in console if the user exist
      fail:
        msg: "User '{{ username }}' already exists and next action stopped!"
      when: checkout.rc == 0
  
    - name: Create a new login user with admin access on RHEL family OS
      user:
        name: '{{ username }}'
        shell: /bin/bash
        password: "{{ password | password_hash('sha512') }}"
        update_password: on_create
        groups:
          - wheel
        state: present
      when: ansible_os_family == "RedHat"

    - name: Create a new login user with admin access on Debian family OS
      user:
        name: '{{ username }}'
        shell: /bin/bash
        password: "{{ password | password_hash('sha512') }}"
        update_password: on_create
        groups:
          - sudo
        state: present
      when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
      
    - name: Generate a 2048-bit SSH key for new user in home directory
      user:
        name: '{{ username }}'
        generate_ssh_key: yes
        ssh_key_bits: 2048
        ssh_key_file: .ssh/id_rsa

    - name: Create a new sudoers file for user
      file:
        path: /etc/sudoers.d/{{ username }}
        state: touch
        mode: 0400
        owner: root

    - name: Add sudoers content in file
      copy:
        dest: /etc/sudoers.d/{{ username }}
        content: |
          {{ username }} ALL=(ALL) NOPASSWD: ALL
          
    - name: Expiring password for user to install a new one on first login
      shell: chage -d 0 '{{ username }}'

    - name: Expiry time for the user in epoch (default value never or -1)
      user:
        name: '{{ username }}'
        expires: '{{ timestamp }}'
      when: date is defined
      
    - name: Sending an e-mail using Legacy SSL to the remote machine
      mail:
        host: 10.3.44.51
        port: 25
        sender: Orchestration service <ansible@5-55.ru>
        to: akuznetsov@5-55.ru
        subject: Ansible-report
        body: 'System {{ ansible_hostname }} has been successfully provisioned.'
        secure: always
      delegate_to: localhost
